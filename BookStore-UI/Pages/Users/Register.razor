@page "/Register"
@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager

<div class="card">
    <h2 class="card-title">Register</h2>
    @if (!response)
    {
        <div class="alert alert-danger">
            <p>Something went wrong with the registration attempt</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText type="email" class="form-control" id="email" aria-describedby="emailHelp" @bind-Value="Model.EmailAddress" />
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                <ValidationMessage For="@(() => Model.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" @bind-value="Model.Password">
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="form-group">
                <label for="confirmpassword">Password</label>
                <input type="password" class="form-control" id="confirmpassword" @bind-value="Model.ConfirmPassword">
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    private RegistrationModel Model = new RegistrationModel();
    private bool response = true;

    private async Task HandleRegistration()
    {
        response = await _authRepo.Register(Model);
        if(response)
            _navManager.NavigateTo("/");
    }
}
