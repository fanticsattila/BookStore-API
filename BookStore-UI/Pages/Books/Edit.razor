@page "/books/edit/{Id}"

@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager

@using System.IO

<h3>Edit book</h3>
<hr />
<br />

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid selection. Please try again!" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading book details" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Book title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value="">--Select author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.FirstName @author.LastName</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="bookcover">Book cover photo</label>
            <InputFile OnChange="HandleFileSelection"></InputFile>
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file and select as new image, or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px; width:100px;" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height:100px; width:100px;" />
            }

        </div>
        <button class="btn btn-primary" type="submit"><span class="oi oi-pencil"></span>  Submit changes</button>
        <button class="btn btn-outline-secondary" @onclick="BackToList"><span class="oi oi-media-skip-backward"></span>  Back to list</button>
    </EditForm>
}


@code {
    [Parameter]
    public string Id { get; set; }
    private BookModel Model = new BookModel();
    private IList<AuthorModel> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;
    private MemoryStream ms;

    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.Get(BookStore_UI.Static.Endpoints.AuthorsEndpoint);
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(BookStore_UI.Static.Endpoints.BooksEndpoint, id);
    }

    private async Task HandleUpdate()
    {
        @if (!isInvalidFileType)
        {
            if (file != null)
            {
                string ext = Path.GetExtension(file.Name);
                string picId = Guid.NewGuid().ToString().Replace("-", "");
                string picName = $"{picId}{ext}";

                _fileUpload.RemoveFile(Model.Image);
                await _fileUpload.UploadFile(file, ms, picName);

                Model.Image = picName;
            }
            else if(isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Model.Image);
                Model.Image = string.Empty;
            }
            isSuccess = await _repo.Update(BookStore_UI.Static.Endpoints.BooksEndpoint, Model, Model.Id);
            if (isSuccess)
            {
                BackToList();
            }
        }
        }


    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        isFileChanged = true;
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains(".jpg") || name.Contains(".png") || name.Contains("jpeg"))
            {
                ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(ms.ToArray());

                imageDataURL = string.Format("data:image/png;base64, {0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
            imageDataURL = string.Empty;

        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }


}
