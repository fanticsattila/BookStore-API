@page "/books/create/"
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager

@using System.IO;

<h3>Create book</h3>
<hr/>
<br/>
@if (!isSuccess)
{
    <ErrorMessage Message="Something went wrong with the operation"/>
}
<EditForm Model="Model" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book title</label>
        <InputText @bind-Value="Model.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Author</label>
        <select @bind="Model.AuthorId" class="form-control" id="author">
            <option value="">--Select author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.FirstName @author.LastName</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="bookcover">Book cover photo</label>
        <InputFile OnChange="HandleFileSelection"></InputFile>
        @if(isInvalidFileType)
        {
            <ErrorMessage Message="Please remove the invalid file and select as new image, or leave this field blank"/>
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px; width:100px;"/>
        }
    </div>
    <button class="btn btn-primary" type="submit"><span class="oi oi-pencil"></span>  Create book</button>
    <button class="btn btn-outline-secondary" @onclick="BackToList"><span class="oi oi-media-skip-backward"></span>  Back to list</button>
</EditForm>

@code {
    private BookModel Model = new BookModel();
    private IList<AuthorModel> Authors;
    private IFileListEntry file;
    private MemoryStream ms;

    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;

    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.Get(BookStore_UI.Static.Endpoints.AuthorsEndpoint);
    }

    private async Task HandleCreate()
    {
        @if (!isInvalidFileType)
        {
            string ext = Path.GetExtension(file.Name);
            string picId = Guid.NewGuid().ToString().Replace("-","");
            string picName = $"{picId}{ext}";
            
            if(file!=null)
                await _fileUpload.UploadFile(file, ms, picName);

            Model.Image = picName;
            isSuccess = await _repo.Create(BookStore_UI.Static.Endpoints.BooksEndpoint, Model);
            if (isSuccess)
            {
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains(".jpg") || name.Contains(".png") || name.Contains("jpeg"))
            {
                ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(ms.ToArray());

                imageDataURL = string.Format("data:image/png;base64, {0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
            imageDataURL = string.Empty;

        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
