@page "/authors/create/"

@attribute [Authorize(Roles = "Administrator, Customer")]

@inject IAuthorRepository _repo
@inject NavigationManager _navManager;

<h3 class="card-title">Create new author</h3>
<br />
<hr />
<br />
@if (!response)
{
    <ErrorMessage Message="Something went wrong with the create attempt" />
}
@if (Model == null)
{
    <LoadingMessage Message="Loading author for create" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="CreateAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstName">First name</label>
            <InputText @bind-Value="Model.FirstName" class="form-control" id="firstName" />
        </div>
        <div class="form-group">
            <label for="lastName">Last name</label>
            <InputText @bind-Value="Model.LastName" class="form-control" id="lastName" />
        </div>
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio" />
        </div>
        <button class="btn btn-primary" type="submit"><span class="oi oi-pencil"></span>  Submit changes</button>
        <button class="btn btn-outline-secondary" @onclick="BackToList"><span class="oi oi-media-skip-backward"></span>  Back to list</button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private AuthorModel Model = new AuthorModel();
    private bool response = true;

    private async Task CreateAuthor()
    {
        response = await _repo.Create(BookStore_UI.Static.Endpoints.AuthorsEndpoint, Model);
        if (response)
            BackToList();
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }

}
